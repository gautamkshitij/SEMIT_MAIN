<document title="Limitations of current version, planned improvements">
  <table>
    <tr>
      <th>Limitation</th>
      <th>Planned improvement</th>
    </tr>
    <tr>
      <td>No explicit relations between tables, no joins</td>
      <td>The applications I'm currently using Smyle for don't need relations;
          will probably think about this after 1.0</td>
    </tr>
    <tr>
      <td>No remote connections to store</td>
      <td>Relatively easy to implement over RMI or MCOP, maybe 0.9</td>
    </tr>
    <tr>
      <td>Store can only be accessed by one process at a time</td>
      <td>Multi-process access in evaluation</td>
    </tr>
    <tr>
      <td>Query optimizer needs improvement</td>
      <td>Fix before 1.0</td>
    </tr>
    <tr>
      <td>Nested fields (structures in structures) should be supported better</td>
      <td>Not determined yet</td>
    </tr>
    <tr>
      <td>A few methods in the collection API are not implemented yet</td>
      <td>Will be fixed in 0.9</td>
    </tr>
    <tr>
      <td>Parts of API may change in future versions</td>
      <td>API will be frozen in 1.0</td>
    </tr>
  </table>
  
  <h>Additional features planned for future versions</h>
  <ul>
    <li>Optimized range and wildcard queries</li>
    <li>Improve Smyle Browser (e.g. allow data manipulation)</li>
    <li>Flexible, customizable schema evolution</li>
    <li>Less strict write synchronisation (allow parallel writes in certain circumstances)</li>
    <li>Improved performance for large numbers of small transactions (planned for 0.9)</li>
    <li>Benchmark suite to evaluate performance</li>
    <li>Make Smyle fit for huge tables (1,000,000+ rows)</li>
  </ul>
  
  Note: Though the Smyle API and store format may change, what I am determined to guarantee
  is that any future Smyle version will be able to read existing Smyle stores. You won't lose
  your data if you upgrade Smyle! (Making a backup is a good idea anyway...)
</document>
