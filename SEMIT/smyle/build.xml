<project name="Smyle" default="default">
  <property name="build.compiler" value="gjc" />
  <property name="build.compiler.nowarn" value="yes" />
  
  <property name="version" value="0.8.3" />

  <path id="projectClassPath">
    <pathelement location="classes" />
    <fileset dir="lib" includes="**/*.jar" excludes="ant_*.jar" />
  </path>
    
  <path id="compileClassPathWithoutClasses">
    <fileset dir="lib" includes="**/*.jar" excludes="ant_gjdoc*.jar" />
  </path>
    
  <path id="compileClassPath">
    <pathelement location="classes" />
    <path refid="compileClassPathWithoutClasses" />
  </path>
    
  <path id="boot.class.path">
    <pathelement location="lib/ant_gj_java.jar" />
    <pathelement location="${java.home}/jre/lib/rt.jar" />
    <pathelement location="${java.home}/lib/rt.jar" />
    <pathelement location="${java.home}/lib/classes.zip" />
  </path> 
    
  <!-- args: ${type}, ${typeCap} -->
  <target name="primvector">
    <!-- generate an instantiation of PrimVector for ${type} -->
    <copy file="src/org/artsProject/util/PrimVector.template"
          tofile="preprocessed/org/artsProject/util/${typeCap}Vector.java" />
    <replace file="preprocessed/org/artsProject/util/${typeCap}Vector.java">
      <replacefilter token="prim" value="${type}" />
      <replacefilter token="Prim" value="${typeCap}" />
    </replace>
  </target>
  
  <target name="unpack-jmcop" unless="unpack-jmcop.notRequired">
    <unjar src="etc/jmcop_src_raw.jar" dest="preprocessed" />
    <touch file="preprocessed/org/artsProject/mcop/CodeGenerator.java" />
  </target>

  <target name="prepare">
    <tstamp />
    <mkdir dir="classes" />
    <mkdir dir="preprocessed" />
    <mkdir dir="temp" />
    <mkdir dir="build" />
    <delete includeEmptyDirs="true"><fileset dir="temp" /></delete>

    <!-- check if jmcop sources needs to be unpacked -->
    <uptodate property="unpack-jmcop.notRequired" targetfile="preprocessed/org/artsProject/mcop/CodeGenerator.java">
      <srcfiles dir="etc" includes="jmcop_src_raw.jar" />
    </uptodate>
    
    <available property="jopt.available" file="lib/ant_jopt.jar" />
    <available property="apidocs.generated" file="doc/javaapi/index.html" />
    
    <antcall target="unpack-jmcop" />
  </target>
  
  <target name="clean" description="Remove all files generated by the build process">
    <delete dir="classes" />
    <delete dir="preprocessed" />
    <delete dir="temp" />
    <delete file="build/smyle.jar" />
    <delete file="build/smyle_compact.jar" />
    <delete dir="doc/javaapi" />
    <delete dir="doc/gjapi" />
    <delete>
      <fileset dir="." includes="TEST-*.txt" excludes="TEST-jester.txt" />
    </delete>
  </target>
  
  <target name="compile" depends="prepare">
    <taskdef name="junitmakebatch" classname="drjava.ant.junit.JUnitMakeBatch">
      <classpath refid="compileClassPath" />
    </taskdef>
    
    <taskdef name="licenseheader" classname="drjava.ant.LicenseHeader">
      <classpath refid="compileClassPath" />
    </taskdef>
    
    <licenseheader licensefile="doc/license/lgpl.txt" keystring="Free Software Foundation">
      <fileset dir="." includes="src/drjava/**/*.java,idl/**/*.idl,src/**/*.tf" />
    </licenseheader>
  
    <!-- compile jMCOP CodeGenerator -->
    <javac destdir="classes" debug="yes"> 
      <classpath refid="compileClassPath" />
      <bootclasspath refid="boot.class.path" />
      <src path="preprocessed" />
      <src path="src" />
      <include name="org/artsProject/mcop/CodeGenerator.java" />
    </javac>
    
    <!-- smyle.idl to java -->
    <java classname="org.artsProject.mcop.CodeGenerator" failonerror="yes">
      <arg line="-smyleextensions idl/smyle.idl drjava.smyle.core preprocessed" />
      <classpath refid="projectClassPath" />
    </java>

    <!-- compile Smyle CodeGenerator -->
    <javac destdir="classes" debug="yes"> 
      <classpath refid="projectClassPath" />
      <bootclasspath refid="boot.class.path" />
      <src path="preprocessed" />
      <src path="src" />
      <include name="drjava/smyle/CodeGenerator.java" />
    </javac>
    
    <!-- testtypes.idl to java -->
    <java classname="drjava.smyle.CodeGenerator" failonerror="yes">
      <arg line="idl/testtypes.idl drjava.smyle.testtypes preprocessed" />
      <classpath refid="projectClassPath" />
    </java>

    <!-- remote.idl to java -->
    <!--<java classname="org.artsProject.mcop.CodeGenerator" failonerror="yes">
      <arg line="idl/remote.idl drjava.smyle.remote" />
      <classpath refid="projectClassPath" />
    </java>-->

    <!-- generate AllTests -->    
    <junitmakebatch targetdir="preprocessed"
     classname="drjava.smyle.tests.AllTests">
      <fileset dir="src" includes="**/tests/**/*Test.java" />
    </junitmakebatch>
    
    <!-- compile generated sources -->
    <javac destdir="classes" debug="yes"> 
      <classpath refid="compileClassPath" />
      <bootclasspath refid="boot.class.path" />
      <src path="preprocessed" />
      <src path="src" />
    </javac>
  </target>
  
  <target name="rebuild" description="Calls 'clean' and then the default target">
    <antcall target="clean" />
    <antcall target="default" />
  </target>
  
  <target name="dist-src" depends="prepare,clean">
    <!-- update ChangeLog -->
    <exec executable="perl">
      <arg line="bin/cvs2cl.pl" />
    </exec>
    <delete file="ChangeLog.bak" />
    
    <delete dir="temp/dist-src" />
    <copy todir="temp/dist-src">
      <fileset dir="." includes="bin/**,lib/**,doc/**,etc/**,examples/**,idl/**,src/**"
       excludes="**/*.bak,lib/*jester*,lib/ant_doc_*,lib/ant_jopt.jar,etc/compression/**,**/*.sdc,**/*.shf,lib/ant_xslt_*" />
      <fileset dir="." includes="build.xml,README,roadmap.txt,howtobuild.txt,ChangeLog" />
    </copy>
    
    <!-- change permissions for start script -->
    <chmod file="temp/dist-src/bin/ant" perm="755" />
    
    <!-- ensure that the distribution compiles (use default target).
         we can't use <ant> because that doesn't set the classpath correctly.
         be sure to hack this if your OS is neither Linux nor Windows 2000! -->
    <exec dir="temp/dist-src" executable="bin/ant" os="Linux" failonerror="yes" />
    <exec dir="temp/dist-src" executable="bin/ant.bat" os="Windows 2000" failonerror="yes" />
    
    <!-- clean it up again -->
    <ant dir="temp/dist-src" target="clean" />
    
    <!-- zip it up -->
    <zip zipfile="build/smyle-src-${version}.zip">
      <zipfileset dir="temp/dist-src" prefix="smyle-src-${version}" />
    </zip>
  </target>
  
  <!-- helper target that copies all extra classes needed to test smyle
       to temp/testclasses -->
  <target name="testclasses" depends="compile">
    <copy todir="temp/testclasses">
      <fileset dir="classes" includes="**/test*/**,drjava/util/*Test*,drjava/gjutil/Factory.class,drjava/util/Benchmark*,drjava/util/DeadlockDetector*,drjava/tf/**" />
      <!-- Man, this is ugly - isn't there a better way? -->
    </copy>
  </target>
  
  <target name="dist-bin" depends="rebuild,smyle_compact.jar">
    <antcall target="testclasses" />
    
    <delete dir="temp/dist-bin" />
    <copy todir="temp/dist-bin">
      <fileset dir="." includes="doc/**,examples/**,build/smyle.jar,build/smyle_compact.jar" 
       excludes="**/*.shf,**/*.bak" />
      <!--<fileset dir="dist-bin" />-->
    </copy>
    
    <!-- ensure that the tests succeed (primarily for checking that we didn't
         forget any classes) -->
    <junit printsummary="yes" fork="no" haltonfailure="yes" haltonerror="yes">
      <classpath>
        <pathelement location="temp/testclasses" />
        <pathelement location="temp/dist-bin/build/smyle.jar" />
        <!-- test support classes -->
        <pathelement location="lib/ant_drjava.jar" />
        <pathelement location="lib/ant_beanshell_1.2b6.jar" />
      </classpath>
      <formatter type="plain" usefile="no" />
      <test name="drjava.smyle.tests.AllTests" />
    </junit>

    <!-- test CodeGenerator and gjc -->
    <java classname="drjava.smyle.CodeGenerator" failonerror="yes" fork="yes" dir="temp/dist-bin">
      <classpath>
        <pathelement location="build/smyle.jar" />
      </classpath>
      <arg line="../../idl/testtypes.idl test temp/preprocessed temp/classes" />
    </java>
    
    <!-- cleanup -->
    <delete dir="temp/dist-bin/temp" />

    <!-- zip it up -->
    <zip zipfile="build/smyle-bin-${version}.zip">
      <zipfileset dir="temp/dist-bin" prefix="smyle-${version}" />
    </zip>
  </target>
  
  <target name="dist">
    <antcall target="dist-src" />
    <antcall target="dist-bin" />
  </target>
  
  <target name="jester-compile">
    <javac destdir="classes" debug="yes"> 
      <classpath refid="compileClassPath" />
      <bootclasspath refid="boot.class.path" />
      <src path="temp/jester" />
    </javac>
  </target>
  
  <target name="testrunner" description="Start the graphical test runner" depends="compile">
    <java classname="junit.swingui.TestRunner" fork="yes">
      <classpath refid="projectClassPath" />
    </java>
  </target>
  
  <target name="browser" description="Start the Smyle browser" depends="compile">
    <java classname="drjava.smyle.browser.Main" fork="no">
      <arg line="teststore" />
      <classpath refid="projectClassPath" />
    </java>
  </target>
  
  <target name="fixcrlf" description="Fix line feeds in text files">
    <fixcrlf srcdir="." includes="*.xml,src/**,**/*.txt" cr="add" eof="remove" />
    <fixcrlf srcdir="." includes="*.sh,bin/*" cr="remove" eof="remove" />
  </target>
  
  <target name="gjdoc" depends="compile" description="Generate GJ API documentation">
    <!-- Generate API docs -->
  
    <taskdef name="collectfiles" classname="drjava.ant.CollectFiles">
      <classpath refid="compileClassPath" />
    </taskdef>
    
    <!-- workaround for gjdoc parser bug... -->
    <copy todir="temp/gjdoc">
      <fileset dir="src" includes="**/Filter.java" />
    </copy>
    <replace dir="temp/gjdoc">
      <replacetoken><![CDATA[<T>.Clause]]></replacetoken>
      <replacevalue><![CDATA[.Clause]]></replacevalue>
    </replace>
    
    <!-- collect names of source files -->
    <collectfiles property="gjdoc.files">
      <!--<fileset dir="src" includes="**/*.java" excludes="java/util/HashMap.java" />-->
      <fileset dir="src" includes="drjava/smyle/**/*.java" excludes="**/test*/**,**/core/**,**/Filter.java" />
      <fileset dir="preprocessed" includes="drjava/smyle/**/*.java" excludes="**/test*/**,**/core/**" />
      <fileset dir="temp/gjdoc" />
    </collectfiles>
    
    <!-- call gjdoc -->
    <mkdir dir="doc/gjapi" />
    <delete includeEmptyDirs="true"><fileset dir="doc/gjapi" /></delete>
    <java classname="gjdoc.Main" fork="yes">
      <arg line="-d doc/gjapi -sourcepath src -public ${gjdoc.files}" />
      <classpath>
        <path refid="compileClassPath" />
        <fileset dir="lib" includes="ant_gjdoc*.jar" />
      </classpath>
    </java>
  </target>
  
  <target name="javadoc" depends="compile" description="Generate Java API documentation">
    <exec executable="bash">
      <arg line="bin/gj2java.sh" />
    </exec>
    <copy todir="temp/javasrc/src">
      <fileset dir="src" includes="**/package.html" />
    </copy>
    
    <mkdir dir="doc/javaapi" />

    <javadoc destdir="doc/javaapi" sourcepath="temp/javasrc/src"
     packagenames="drjava.smyle,drjava.smyle.meta"
     windowtitle="Smyle ${version} API (Java)"
     doctitle="Smyle ${version} API (Java)">
      <classpath refid="compileClassPath" />
    </javadoc>
  </target>

  <target name="doc-unless-generated" depends="prepare" unless="apidocs.generated">
    <antcall target="javadoc" />
    <antcall target="gjdoc" />
  </target>
  
  <target name="tf" depends="compile" description="Compile, test TF">
    <!-- run tests -->
    <junit printsummary="yes" fork="no" haltonfailure="yes" haltonerror="yes">
      <classpath refid="projectClassPath" />
      <formatter type="plain" />
      <formatter type="plain" usefile="no" />
      <test name="drjava.tf.tests.TFTest" />
    </junit>
  </target>
  
  <target name="test" depends="tf" description="Compile, test">
    <!-- run TF tests first -->
    <java classname="drjava.tf.textui.TestRunner" fork="yes" failonerror="yes">
      <arg value="src/drjava/smyle/tests/IndexTest.tf" />
      <arg value="src/drjava/smyle/tests/PrefixKeySet.tf" />
      <classpath refid="compileClassPath" />
    </java>
    
    <!-- run tests -->
    <junit printsummary="yes" fork="no" haltonfailure="yes" haltonerror="yes">
      <classpath refid="projectClassPath" />
      <formatter type="plain" />
      <formatter type="plain" usefile="no" />
      <test name="drjava.tf.tests.TFTest" />
      <test name="drjava.smyle.tests.AllTests" />
    </junit>
  </target>
  
  <target name="jester-test">
    <junit printsummary="yes" fork="yes" timeout="30000" haltonfailure="yes">
      <classpath refid="projectClassPath" />
      <formatter type="plain" />
      <formatter type="plain" usefile="no" />
      <test name="drjava.smyle.tests.AllTests" />
    </junit>
  </target>
  
  <target name="jester" depends="clean,test">
    <taskdef name="jester" classname="jester.ant.Jester" />

    <delete dir="temp/jester" />
    <copy todir="temp/jester">
      <fileset dir="src" includes="**/*.java"
       excludes="**/*tests/**" />
    </copy>
    <jester
      srcdir="temp/jester"
      compiletarget="jester-compile"
      testtarget="jester-test"
      removecomments="yes" />
  </target>
  
  <target name="smyle_compact.jar" if="jopt.available" depends="compile,testclasses">
    <!-- generate a stripped-down version of AllTests and compile it -->
    <junitmakebatch targetdir="temp/compactsrc"
     classname="drjava.smyle.tests.AllTests">
      <fileset dir="src" includes="**/tests/**/*Test.java" excludes="**/Memory*.java" />
    </junitmakebatch>
    
    <javac destdir="temp/testclasses" debug="yes"> 
      <src path="temp/compactsrc" />
    </javac>
    
    <!-- compile sources without CodeGenerator -->
    <mkdir dir="temp/compactclasses" /> 
    <javac destdir="temp/compactclasses" debug="no"> 
      <classpath refid="compileClassPathWithoutClasses" />
      <bootclasspath refid="boot.class.path" />
      <src path="preprocessed" />
      <src path="src" />
      <include name="drjava/smyle/*.java" />
      <include name="drjava/smyle/meta/*.java" />
      <include name="drjava/smyle/core/Memory*.java" /> <!-- needed for tests -->
      <exclude name="**/test*/**" />
      <exclude name="drjava/smyle/CodeGenerator.java" />
    </javac>
    
    <!-- make jar -->
    <jar jarfile="temp/smyle_c.jar">
      <fileset dir="temp/compactclasses" />
    </jar>
    
    <!-- optimize jar -->
    <java classname="Jopt">
      <arg line="temp/smyle_c.jar" />
      <classpath refid="compileClassPath" />
    </java>
    <move file="temp/smyle_c_o.jar" tofile="build/smyle_compact.jar" />
    
    <!-- test if jar file works -->
    <junit printsummary="yes" fork="no" haltonfailure="yes" haltonerror="yes">
      <classpath>
        <pathelement location="temp/testclasses" />
        <pathelement location="build/smyle_compact.jar" />
        <pathelement location="lib/ant_drjava.jar" /> <!-- test support classes -->
      </classpath>
      <formatter type="plain" usefile="no" />
      <test name="drjava.smyle.tests.AllTests" />
    </junit>
  </target>  
  
  <target name="jar" depends="test" description="Compile, test, make smyle.jar">
    <mkdir dir="temp/classes" />
    <delete includeEmptyDirs="true"><fileset dir="temp/classes" /></delete>
    
    <!-- compile Smyle and the necessary parts of jMCOP -->
    <javac destdir="temp/classes" debug="yes"> 
      <bootclasspath refid="boot.class.path" />
      <src path="preprocessed" />
      <src path="src" />
      <include name="drjava/smyle/**/*.java" />
      <exclude name="**/test*/**" />
      <exclude name="**/demos/**" />
    </javac>
    
    <!-- make the jar (including GI) -->
    <unjar src="lib/gi09.jar" dest="temp/gi" />
    <unjar src="lib/ant_gjc.jar" dest="temp/gjc" />
    <unjar src="lib/ant_gj_java.jar" dest="temp/gjc" />
    <jar jarfile="build/smyle.jar">
      <fileset dir="temp/classes" />
      <fileset dir="temp/gi" excludes="META-INF/**" />
      <fileset dir="temp/gjc" excludes="META-INF/**" />
    </jar>
    
    <!-- create smyle_compact.jar -->
    <!--<antcall target="smyle_compact.jar" />-->
  </target>
  
  <target name="default" depends="jar,doc-unless-generated"
   description="Default target - compile, test, make jar, gen docs" />
  
  <target name="bench" depends="compile" description="Compile, run benchmark">
    <!--<java classname="drjava.tf.textui.TestRunner" fork="yes" failonerror="yes">
      <arg value="src/drjava/smyle/tests/SmyleBench.tf" />
      <classpath refid="compileClassPath" />
    </java>-->
    <java classname="drjava.smyle.tests.SmyleBench" fork="yes">
      <jvmarg line="-showversion" />
      <classpath refid="projectClassPath" />
    </java>
  </target>
  
  <target name="stress" depends="compile" description="Compile, run stress test">
    <java classname="drjava.smyle.tests.Stresstest" fork="yes">
      <classpath refid="projectClassPath" />
    </java>
  </target>
  
  <target name="sqlbench" depends="compile" description="Compile, run SQL comparison benchmark">
    <java classname="drjava.smyle.tests.SQLBench" fork="yes">
      <classpath>
        <path refid="projectClassPath" />
        <path location="../domestos/lib/mysql.jar" />
      </classpath>
    </java>
  </target>
  
  <target name="profile" depends="compile" description="Compile, run and profile benchmark">
    <java classname="drjava.smyle.tests.SmyleBench" fork="yes" output="profile.txt">
      <jvmarg line="-Xprof" />
      <classpath refid="projectClassPath" />
    </java>
    <echo message="For results see profile.txt" />
  </target>

  <target name="fullprofile" depends="compile" description="Compile, run and profile benchmark in detail">
    <java classname="drjava.smyle.tests.SmyleBench" fork="yes">
      <jvmarg line="-Xrunhprof:cpu=samples,depth=12,lineno=n" />
      <classpath refid="projectClassPath" />
    </java>
    <move file="java.hprof.txt" tofile="fullprofile.txt" />
    <echo message="For results see fullprofile.txt" />
  </target>

  <target name="memprofile" depends="compile" description="Compile, run and profile benchmark mem usage">
    <java classname="drjava.smyle.tests.SmyleBench" fork="yes">
      <jvmarg line="-Xrunhprof:heap=sites -Xms96m -Xmx96m" />
      <classpath refid="projectClassPath" />
    </java>
    <move file="java.hprof.txt" tofile="memprofile.txt" />
    <echo message="For results see memprofile.txt" />
  </target>

  <target name="xslt-do">
    <java classname="com.jclark.xsl.sax.Driver" fork="no">
      <arg line="etc/doc/${file}.xml etc/doc/stylesheet.xsl doc/${file}.html" />
      <classpath refid="compileClassPath" />
    </java>
  </target>
  
  <target name="xslt">
    <!--<style basedir="etc/doc" destdir="doc"
       extension="html" style="etc/doc/stylesheet.xsl" />-->
    
    <antcall target="xslt-do"><param name="file" value="architecture" /></antcall>
    <antcall target="xslt-do"><param name="file" value="index" /></antcall>
    <antcall target="xslt-do"><param name="file" value="gettingstarted" /></antcall>
    <antcall target="xslt-do"><param name="file" value="idioms" /></antcall>
    <antcall target="xslt-do"><param name="file" value="concepts" /></antcall>
    <antcall target="xslt-do"><param name="file" value="license/3rdparty" /></antcall>
    <antcall target="xslt-do"><param name="file" value="features" /></antcall>
    <antcall target="xslt-do"><param name="file" value="schema_evolution" /></antcall>
    <antcall target="xslt-do"><param name="file" value="data_types" /></antcall>
    <antcall target="xslt-do"><param name="file" value="gj" /></antcall>
    <antcall target="xslt-do"><param name="file" value="limitations" /></antcall>
    <antcall target="xslt-do"><param name="file" value="history" /></antcall>
    <antcall target="xslt-do"><param name="file" value="benchmark" /></antcall>
    <antcall target="xslt-do"><param name="file" value="users" /></antcall>
    <antcall target="xslt-do"><param name="file" value="idl" /></antcall>
    <antcall target="xslt-do"><param name="file" value="browser" /></antcall>
    <antcall target="xslt-do"><param name="file" value="performance" /></antcall>
  </target>  
</project>
