package uic.semit.Project.ProjectData.sourceCodeJSON;

import java.io.File;
import java.io.FileReader;
import java.io.LineNumberReader;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;

import uic.semit.kshitij.FileWalker;

public class FetchSourceFiles {

	public static SourceFiles getSourceFiles(String projectName) {

		String extension = ".java";
		List<File> codeFiles = FileWalker.getFilesFromProjectWithExtension(
				projectName, extension);

		SourceFiles projectFiles = new SourceFiles();

		HashMap<String, List<SourceCode>> repoMapWithCodeFiles = new HashMap<String, List<SourceCode>>();

		List<SourceCode> SourceCodeFilesSVN = new ArrayList<>();
		List<SourceCode> SourceCodeFilesGIT = new ArrayList<>();
		List<SourceCode> SourceCodeFilesCVS = new ArrayList<>();
		List<SourceCode> SourceCodeFilesBZR = new ArrayList<>();
		List<SourceCode> SourceCodeFilesHG = new ArrayList<>();
		List<SourceCode> SourceCodeFilesCODE = new ArrayList<>();

		for (File codeFile : codeFiles) {

			if (codeFile.getName().contains("/svn/")) {

				SourceCodeFilesSVN.add(new SourceCode(codeFile.getName(),
						codeFile.getPath(), extension, codeFile.length(),
						getNumberOfLines(file), codeJson));

			} else if (codeFile.getName().contains("/git/")) {

			} else if (codeFile.getName().contains("/hg/")) {
			} else if (codeFile.getName().contains("/bzr/")) {
			} else if (codeFile.getName().contains("cvs")) {
			} else {

			}

		}

		return null;
	}

	public static Integer getNumberOfLines(File file) {
		LineNumberReader lnr = new LineNumberReader(new FileReader(file)));
		lnr.skip(Long.MAX_VALUE);
		System.out.println(lnr.getLineNumber() + 1); // Add 1 because line index
														// starts at 0
		// Finally, the LineNumberReader object should be closed to prevent
		// resource leak
		lnr.close();

		return 0;
	}

	public static void main(String[] args) {

	}

}
