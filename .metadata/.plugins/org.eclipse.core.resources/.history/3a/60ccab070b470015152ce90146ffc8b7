package grammar;

import java.io.FileInputStream;
import java.io.IOException;

import org.antlr.v4.runtime.ANTLRInputStream;
import org.antlr.v4.runtime.CommonTokenStream;
import org.antlr.v4.runtime.tree.ParseTree;

/**
 * @author Kshitij Gautam
 *         http://stackoverflow.com/questions/21534316/is-there-a-
 *         simple-example-
 *         of-using-antlr4-to-create-an-ast-from-java-source-code?lq=1
 */
public class MyVisitor extends JavaBaseVisitor<Void> {

	/**
	 * Main Method
	 * 
	 * @param args
	 * @throws IOException
	 */
	public static void main(String[] args) throws IOException {
		ANTLRInputStream input = new ANTLRInputStream(
				new FileInputStream(
						"/home/leoks/EclipseIndigo/workspace2/SO/src/mypackage/MyVisitor.java")); // we'll
																									// parse
																									// this
																									// file
		JavaLexer lexer = new JavaLexer(input);
		CommonTokenStream tokens = new CommonTokenStream(lexer);
		JavaParser parser = new JavaParser(tokens);
		JavaParser.javaSource_return javascource_return;
		parser.javaSource();
		ParseTree tree = parser.compilationUnit(); // see the grammar ->
													// starting point for
													// parsing a java file

	}

}